func fooFoo2() {
	arr := {1: 1, 2: 3, 3: 5, 4: 7}
	sum := 0
	for i, _ <- arr {
		if arr[i] > 0 {
			println("1")
			return
		}
		sum += arr[i]
	}
	println("0")
	return
}

func forFoo1() int {
	arr := {1: 1, 2: 3, 3: 5, 4: 7}
	sum := 0
	for i, _ <- arr {
		if arr[i] > 0 {
			return 1
		}
		sum += arr[i]
	}
	return 0
}
println(forFoo1())
fooFoo2()

x := 0
if t := false; t {
	x = 3
} else {
	x = 5
}
println("x:", x)

x = 0
switch s := "Hello"; string(s) {
default:
	x = 7
case "world", "hi":
	x = 5
case "xsw":
	x = 3
}
println("x:", x)

v := "Hello"
switch {
case v == "xsw":
	x = 3
case v == "Hello", v == "world":
	x = 9
default:
	x = 7
}
println("x:", x)

v = "Hello"
switch {
case v == "xsw":
	x = 3
case v == "hi", v == "world":
	x = 9
default:
	x = 11
}
println("x:", x)

switch {
}

switch v {
default:
	println(v)
}

switch y := v; y {
default:
	println(y)
}

for k, v := range [k for k, _ <- make([]int, 20)] {
	if k < 10 {
		continue
	}
	if k > 15 {
		break
	}
	println(k, v)
}

for k, v <- {k: k for k, _ <- make([]int, 20)} {
	if k < 10 {
		continue
	}
	if k > 15 {
		println("map reach break", v > 15)
		break
	}
}

for k, v <- {k: k for k, _ <- make([]int, 20)} {
	if k < 10 {
		continue
	}
	if k > 15 {
		println("map reach break", v > 15)
		break
	}
}

println("fallthrough with tag")
switch v {
case "Hello":
	println(v)
	fallthrough
case "hi":
	println(v)
	fallthrough
default:
	println(v)
}
println("fallthrough without tag")

z := 3
switch {
case z < 10:
	println(z)
	fallthrough
case z == 10:
	println(z)
	fallthrough
case z > 10:
	println(z)
	fallthrough
default:
	println(z)
}

// switch with break
switch z {
case 3:
	if v == "Hello" {
		println("break")
		break
	}
	println("break fail")
default:
	println(z)
}

goto L
println("before")
L:
	println("over")

	i := 0
L2:
	if i < 3 {
		println(i)
		i++
		goto L2
	}
	println("over")

	x = 0
L3:
	for i := 0; i < 5; i++ {
		switch i {
		case 1:
			println(x)
			x++
			continue L3
		case 2:
			println(x)
			x++
			break
		case 3:
			println(x)
			break L3
		case 4:
			println(x)
		default:
			x = 7
			println(x)
		}
	}
